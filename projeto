Personalizando Acessos e Automatizando ações no MySQL

use company;

select * from employee;
select * from dept_locations;
select * from department;

-- Número de empregados por departamento e localidade 

create view Numero_Empregados_Departamento_Localidade as
select d.Dname as Nome_Departamento,dp.Dlocation as Localidade, count(e.Fname) as Qnt_Empregados from department d
inner join employee e on e.Dno = d.Dnumber
inner join dept_locations dp on dp.Dnumber = d.Dnumber
group by d.Dnumber,dp.Dlocation;

select * from Numero_Empregados_Departamento_Localidade;



-- Lista de departamentos e seus gerentes 

create view Departamentos_Gerentes as
select d.Dname as Nome_Departmento, d.Dnumber as Número_Departamento, e.Fname as Nome_Gerentes, e.super_ssn as Registros from department d
inner join employee e on e.super_ssn = d.mgr_ssn;

select * from Departamentos_Gerentes;



-- Projetos com maior número de empregados (ex: por ordenação desc) 

create view Projecto_1 as
select p.Pname as Nome_Projeto, p.Pnumber as Numero_Projeto, count(e.Dno) as Total_Funcionarios from employee e
inner join project p on p.Dnum = e.Dno
group by e.Dno
order by e.dno desc;


create view Projecto_2 as
select p.Pname as Nome_Projeto , p.Pnumber as Numero_Projeto, count(e.Dno) as Total_Funcionarios from employee e
inner join project p on p.Dnum = e.Dno
group by p.Pname, e.Dno
order by e.dno desc;

select * from Projecto_1;
select * from Projecto_2;


-- Lista de projetos, departamentos e gerentes 

select * from project;
select * from department;
select * from employee;

create view  Lista_Gerentes as
select d.Dname as Departmento, Pname as Nome_Departamento, e.Fname as Nome_Gerente from employee e
inner join department d on d.Mgr_ssn = e.Ssn
inner join project p on p.Dnum =  d.Dnumber;

select * from Lista_Gerentes;

-- Quais empregados possuem dependentes e se são gerentes 


create view dependetes_empregados_gerentes as
select e.Fname, dpt.Dependent_name, dpt.Relationship, e.Ssn, e.Super_ssn from employee e
inner join dependent dpt on dpt.Essn = e.Ssn
Group by e.Fname,e.Super_ssn,dpt.Dependent_name,dpt.Relationship,e.Ssn;

select * from dependetes_empregados_gerentes;


-- criação e permissões para os usuarios gerente e empregados


create user 'new_gerente'@'localhost' Identified by 'password';
create user 'new_employee'@'localhost' Identified by '1234';


show grants for new_gerente@localhost;
show grants for new_employee@localhost;


grant select on company.employee to new_gerente@localhost;
grant select on company.department to new_gerente@localhost;

grant select on company.dependent to new_employee@localhost;
grant select on company.dept_locations to new_employee@localhost;
grant select on company.employee to new_employee@localhost;
grant select on company.project to new_employee@localhost;
grant select on company.works_on to new_employee@localhost;

FLUSH PRIVILEGES;

revoke select on company.* from new_employee@localhost;

-- TRIGGERS update company

delimiter //
create trigger aumento_salary2 before update on company.employee
for each row
begin
case new.Dno 
			when 4 then set new.Salary = old.Salary * 1.2; 
		end case; 
end; //
delimiter ;

update employee set salary = 36000
where Dno = 4;

select * from employee;

-- trigger delete company

create table demitidos_messages(
	id int auto_increment primary key,

    message varchar(100),
    ssn char(9)
);

delimiter //
create trigger demitidos before delete on company.employee
for each row
begin
insert into demitidos_messages (message,ssn)
values ('Deletado', old.ssn);
end; //
delimiter ;

select * from employee;
insert into employee (Fname, Minit, Lname, Ssn, Bdate, Adress, Sex, Salary, Super_ssn, Dno) 
			values('João', 'B', 'Smith', '123456759', '1965-01-09', '731-Fondren-Houston-TX', 'M', '32000.00', NULL, '5'); 
delete from employee where ssn = '123456759';

select * from demitidos_messages;


-- trigger eccomerce

// before delete
use ecommerce1;

select * from cliente;

create table exclusao(
id int auto_increment primary key,

fname varchar(10),
minit varchar(3),
lname varchar (45),
CPF char(11),
address varchar(100),
message varchar(100)
);

delimiter //
create trigger save_exclusao before delete on ecommerce1.cliente
for each row
begin
insert into exclusao (fname,minit,lname,CPF,address,message)
values (old.fname,old.minit,old.lname,old.CPF,old.address,'Exclui a conta');
end; //
delimiter ;

delete from cliente where CPF = '12346789';
select * from exclusao;

select * from product;

// before update

delimiter //
create trigger new_valores before update on ecommerce1.product
for each row
begin
case new.category
when 'Tênis' then set new.p_values = old.p_values * 1.2;
when 'Vestuário' then set new.p_values = old.p_values * 1.1;
when 'Acessório' then set new.p_values = old.p_values * 1.3;
end case;
end; //
delimiter ;

update product set p_values = 1000
where category = 'Tênis';

select * from product;

   SET SQL_SAFE_UPDATES=0;
